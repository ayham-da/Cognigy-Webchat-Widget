"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const socket_client_1 = require("@cognigy/socket-client");
const compatibility_1 = require("./helper/compatibility");
const events_1 = require("events");
class WebchatClient extends socket_client_1.SocketClient {
    constructor(webchatConfigUrl, options = {}) {
        super(WebchatClient.getEndpointBaseUrl(webchatConfigUrl), WebchatClient.getEndpointUrlToken(webchatConfigUrl), WebchatClient.createWebchatOptions(options));
        this.analytics = new events_1.EventEmitter();
        this.loadWebchatConfig = () => __awaiter(this, void 0, void 0, function* () {
            if (this.webchatConfig)
                return;
            const config = yield WebchatClient.fetchWebchatConfig(this.webchatConfigUrl);
            this.webchatConfig = config;
        });
    }
    static createDefaultWebchatOptions() {
        const forceWebsockets = compatibility_1.shouldForceWebsockets();
        return {
            channel: 'webchat-client',
            forceWebsockets
        };
    }
    static createWebchatOptions(options = {}) {
        return Object.assign({}, WebchatClient.createDefaultWebchatOptions(), options);
    }
    static fetchWebchatConfig(webchatConfigUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            // @ts-ignore
            return (yield window.fetch(webchatConfigUrl)).json();
        });
    }
    static getEndpointBaseUrl(webchatConfigUrl) {
        const partials = webchatConfigUrl.split('/');
        partials.splice(partials.length - 1, 1);
        return partials.join('/');
    }
    static getEndpointUrlToken(webchatConfigUrl) {
        return webchatConfigUrl.split('/').pop();
    }
    get webchatConfigUrl() {
        // @ts-ignore
        return `${this.socketUrl}/${this.socketURLToken}`;
    }
    connect() {
        const _super = Object.create(null, {
            connect: { get: () => super.connect }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadWebchatConfig();
            return _super.connect.call(this);
        });
    }
    emitAnalytics(type, payload) {
        this.analytics.emit('analytics-event', {
            type,
            payload
        });
    }
    registerAnalyticsService(handler) {
        this.analytics.on('analytics-event', handler);
    }
}
exports.WebchatClient = WebchatClient;
